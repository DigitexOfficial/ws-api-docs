syntax = "proto3";

// version: 141
// last_field_id: 351

package digitex_wire;

option java_package = "com.smartdec.digitex";

enum MessageType // Defines the type of a Message
{
  NOP = 0;  // No-op (No operation)
  PLACE_ORDER = 513;  // Create a new Order
  CANCEL_ORDER = 514;  // Cancel an active Order
  CANCEL_ALL_ORDERS = 515;  // Cancel all active Orders
  CHANGE_LEVERAGE = 516;  // Leverage changing for a specific contract
  ORDER_STATUS = 517;  // Placed order information (PLACE_ORDER message response)
  ORDER_FILLED = 518;  // Matched order information
  CHANGE_LEVERAGE_ALL = 519;  // Leverage changing for all contract (for exact market)
  EXCHANGE_RATE_UPDATE = 520;  // Exchange rate request (Service message)
  TRADER_BALANCE_UPDATE = 521;  // User balance request (for trading (NOT main balance)) - Service message
  TRADER_BALANCE = 522;  // Trading balance information (TRADER_BALANCE_UPDATE message response)
  POSITION_EVENT = 523;  // New information about a position when a position has been changed
  LEVERAGE = 524;  // New information about a leverage when a leverage has been changed (CHANGE_LEVERAGE & CHANGE_LEVERAGE_ALL message response)
  EXCHANGE_RATE = 525;  // Pair rate information (EXCHANGE_RATE_UPDATE message response)
  ORDER_BOOK_REQUEST = 526;  // Request for order book information
  ORDER_BOOK = 527;  // Order book information (ORDER_BOOK_REQUEST message response)
  ORDER_BOOK_UPDATED = 528;  // Changes since the previous ORDER_BOOK_UPDATED. Приходит дельта по прайс поинтам с момента последнего изменения 
  PING = 529;  // Connection check request message
  PONG = 530;  // Connection check response message (PING message response) 
  UPDATE_ORDER = 531;  // Quantity changing request in the order
  GET_TRADER_STATUS = 532;  // Trader status request
  TRADER_STATUS = 533;  // Request for overall information about the trader (GET_TRADER_STATUS message response)
  CONTROL = 534;  // ControlCommand Service message 
  FUNDING = 535;  // Funding information message (when Funding happened)
  OHLCV_LIST = 536;  // Candles information for a trading view
  TRADE_LIST = 537;  // DEPRECATED
  SUBSCRIBE = 538;  // Request to subscribe for certain information in the Market Data channel
  SUBSCRIBE_STATUS = 539;  // Subscription request response
  UPDATE_CONTRACT = 540;  // NOT IMPLEMENTED
  UPDATE_ALL_CONRACTS = 541;  // NOT IMPLEMENTED
  CLOSE_CONTRACT = 542;  // Closing a specific contract
  CLOSE_ALL_CONTRACTS = 543;  // Closing all contracts (for one market)
  UPDATE_TRADER_SETTINGS = 544;  // Update user preferences - Service message
  TRADER_SETTINGS = 545;  // Information on settings for a trader - Service message (UPDATE_TRADER_SETTINGS message response)
  ORDER_CANCELED = 546;  // Specific order cancelation (CANCEL_ORDER & CANCEL_ALL_ORDERS message response)
  ENGINE_STATUS = 547;  // Engine status
  GET_MARKET_STATE = 548;  // Request for information on the market
  MARKET_STATE = 549;  // Market information (response for the GET_MARKET_STATE message)
  GET_EXCHANGE_RATES = 550;  // Rate request
  EXCHANGE_RATES = 551;  // Rate information (GET_EXCHANGE_RATES message response)
  MARKET_STATE_UPDATE = 552;  // Updated information on the market
  CONTRACT_CLOSED = 553;  // Contract closure information (CLOSE_CONTRACT & CLOSE_ALL_CONTRACTS message response)
  CONTRACT_TRANSFERRED = 554;  // Contracts that have been transferred to the system trader (in a liquidation or settlement situation)
  START_RUN = 555;  // DEPRECATED
  RUN_STARTED = 556;  // DEPRECATED
  FINISH_RUN = 557;  // DEPRECATED
  RUN_FINISHED = 558;  // DEPRECATED
  UPDATE_CONTEST_TRADER_SETTINGS = 559;  // DEPRECATED (Service message)
  CONTEST_TRADER_SETTINGS = 560;  // DEPRECATED (Service message)
  CONTROL_RESULT = 561;  // ControlCommand Service message response (CONTROL message response)
  GET_TRADER_BALANCE = 562;  // Trader Balance request
  UPDATE_TRADER_BALANCE = 563;  // the same as TRADER_BALANCE_UPDATE - it is better to delete
  TRADER_BALANCE_UPDATED = 564;  // Updated information about Trader Balance (UPDATE_TRADER_BALANCE message response)
  INTERNAL_MARKET_STATE_UPDATE = 565;  // Updated information about the internal market state - Service message
  PLACE_DELAYED_ACTION = 566;  // Create a pending order
  UPDATE_DELAYED_ACTION = 567;  // Update pending order parameters
  CANCEL_DELAYED_ACTION = 568;  // Cancel a pending order
  DELAYED_ACTION_STATUS = 569;  // Pending order information (PLACE_DELAYED_ACTION & UPDATE_DELAYED_ACTION & CANCEL_DELAYED_ACTION message response)
  LIQUIDATIONS = 570;  // Information on all liquidated contracts for all users for 1 time tick (since the last change in the spot price)
  FUNDING_INFO = 571;  // General information about funding
  ERROR = 572;  // Error information - Service message
  MARKET_TRADER_STATISTICS = 573;  // Market trader statistics
  EXCHANGE_RATES_UPDATE = 574;  // Update information on rates - Service message
};

enum ValueType // Defines the type of value 
{
  TYPE_NONE = 0; // Value type is not defined
  INT64 = 1; // Integer value type
  UINT64 = 2; // Unsigned Integer value type
  DOUBLE = 3; // Double value type
  STRING = 4; // String value type
  BYTES = 5; // Bytes value type
  DECIMAL = 6; // Decimal value type
}

enum OrderSide // Defines the side of an Order
{
  SIDE_UNDEFINED = 0; // Order side is not defined
  BUY = 1; // Trader creates the buy/long order
  SELL = 2; // Trader creates the short/sell order 
}

enum OrderType // Defines the type of an Order
{
  TYPE_UNDEFINED = 0; // Order type is not defined
  MARKET = 1; // Trader creates the market order
  LIMIT = 2; // Trader creates the limit order
}

enum OrderDuration // Defines how long an order will be active
{
  DURATION_UNDEFINED = 0; // Duration is not defined
  GFD = 1;  // Good for the day - orders are canceled automatically at 00:00:00 UTC of the next day.
  GTC = 2;  // Good till cancelled - orders are remained active until it is either executed or until the trader cancels it.
  GTF = 3;  // Good till funding - orders are canceled automatically at the next funding (i.e 00:00:00, 08:00:00, 16:00:00 UTC).
  IOC = 4;  // Immediate or cancel - orders are executed immediately. If the order cannot be partially filled, it is canceled. If the order cannot be fully filled, the remainder is canceled.
  FOK = 5;  // Fill or kill - orders are executed immediately. If the order cannot be fully filled immediately, it is canceled.
}

enum OrderStatus // Defines the status of an Order
{
  STATUS_UNDEFINED = 0; // Order status is not defined
  PENDING = 1; // The order has not been processed by the engine yet, 
  ACCEPTED = 2; // The order has been accepted by the engine
  REJECTED = 3; // The order has not been accepted by the engine, not processed and rejected
  CANCELED = 4; // The order has been canceled by the user
  FILLED = 5; // The order has been matched
  PARTIAL = 6; // A part of the order has been filled
  TERMINATED = 7; // The order has been canceled after Leverage changes
  EXPIRED = 8; // The order was canceled according to the order type's rules (e.g. ??) or by the exchange (e.g. ??)
  TRIGGERED = 9; // The order has been triggered after the delayed action completed
}

enum OrderPosition // Defines the position of open Contracts
{
  UNDEFINED = 0; // Contract position is not defined
  LONG = 1; // Contract position is long
  SHORT = 2; // Contract position is short
}

enum DelayedActionType // Defines the type of delayed action
{
  DA_UNDEFINED = 0; // Delayed action type is not defined
  DA_ORDER = 1; // Delayed order has been placed 
}

enum DelayedTriggerVariable // Defines the variable of condition for delayed action 
{
  DTV_UNDEFINED = 0; // condition variable is not defined
  DTV_ORACLE_PRICE = 1; // Condition of placing the byu market order by creating the delayed action, trader price variable is taking into consideration (e.g. Place Buy Market Order if Spot Price (SP) ≤ n USD)
  DTV_LAST_TRADE_PRICE = 2; // Condition of placing the byu market order by creating the delayed action, last trade price variable is taking into consideration (e.g. Place Buy Market Order if Last Trade Price (LTP) ≤ n USD)
}

enum DelayedTriggerCondition // Defines the condition of the delayed action 
{
  DTC_UNDEFINED = 0; // Condition of the delayed action is not defined
  DTC_GREATER_OR_EQUAL = 1; // Delayed action will place an order if Spot Price >= the appropriate price 
  DTC_LESS_OR_EQUAL = 2; // elayed action will place an order if Spot Price <= the appropriate price 
}

enum ControlCommand // TBU
{
  CONTROL_NOP = 0;
  STOP = 1;
  RESTART = 2;
  SUSPEND = 3;
  MINUTE = 4;
  SUSPEND_TRADING = 5;  // suspend trading, in the suspended state trading-related requests will fail
  RESUME_TRADING = 6;   // resume trading
  DISABLE_FUNDING = 7;  // disable funding events
  ENABLE_FUNDING = 8;  // enable funding events
  FORCE_FUNDING = 9;    // perform funding right now
  DISABLE_WITHDRAWALS = 10;
  ENABLE_WITHDRAWALS = 11;
  BAN_TRADER = 12;
  UNBAN_TRADER = 13;
  DUMP_TRADES = 14;
  DUMP_ORDERS = 15;
  CLEAR_ORDERBOOK = 16; // clear the orderbook
  SETTLE_MARKET = 17;   // perform the final settlement, clear the orderbook and close the market
  GET_STATE = 18;       // request the engine state
  DUMP_TRADER_STATES = 19;
  TICK = 20;
  SET_FUNDING_RATE = 21;
  SET_LAST_TRADE_PRICE = 22;
  SET_VALUE = 23;               // generic request, requires value_code
  GET_VALUE = 24;               // generic request, requires value_code
  HTTP_GET = 25;                // generic request, requires value_code
  HTTP_POST = 26;               // generic request, requires value_code
  DUMP_MARKET_TRADER_STATES = 27;
  MINUTE_RANDOM_TIME = 28;
  CLEAR_LAST_TRADE = 29;
}

enum FundingType // Defines the type of funding
{
  FUNDING_UNKNOWN = 0; // Funding type is not defined 
  FUNDING_FUNDING = 1; // Rewards to miners in scope of the funding event 
  FUNDING_LIQUIDITY_REWARD = 2; // Rewards to miners in scope of the liquidity mining 
}

message Decimal // Defines the numbers type used for transferring to Protobuf
{
  int64 value64 = 36; // 64-bit signed integer value type.
  bytes value256 = 64; // Protobuf does not support 256-bit values natively, this is ULEB128 value. Used only if value64 is not enough.
  uint32 scale = 37; // The number of digits after the decimal point.
}

message PlaceOrderMessage // Defines the order properties during order placement 
{
  OrderType order_type = 32;  // Order type
  OrderSide side = 33;  // Order side
  uint32 leverage = 34;  // Order leverage
  OrderDuration duration = 35;  // Order duration (e.g. GFD, GTC)
  Decimal price = 38; // Order price
  Decimal quantity = 39; // Quantity of the Order
  int32 is_closing = 280; // Reduce Only flag 
  uint32 order_flags = 348; // Not used, May be used for defining the order position in a queue 
}

message UpdateOrderMessage // Defines the order properties during order updating (no UI elements for doing this action by a trader)
{
  bytes prev_client_id = 40; // Order id is going to be updated
  OrderType order_type = 32;  // Order type
  OrderSide side = 33; // Order side
  uint32 leverage = 34;  // Order leverage
  OrderDuration duration = 35; // Order duration (e.g. GFD, GTC)
  Decimal price = 38; // Order price
  Decimal quantity = 39; // Quantity of contracts 
  uint32 order_flags = 348; // Not used, May be used for defining the order position in a queue
}

message CancelOrderMessage // Defines the order properties during order cancelation
{
  bytes prev_client_id = 40; // Order id is going to be cancelled 
}

message CancelAllOrdersMessage // Defines the order properties during all orders cancelation
{
  OrderSide side = 33; // Order side
  Decimal price = 38; // Order price
}

message ChangeLeverageMessage // Defines the number of leverage to be changed for the specific contract (no UI elements for doing this action by a trader)
{
  uint32 leverage = 34; // Leverage size 
  uint64 contract_id = 41; // Contract ID is going to be changed 
}

message ChangeLeverageAllMessage // Defines the number of leverage to be changed for all contracts
{
  uint32 leverage = 34; // Leverage size 
}

message OrderStatusMessage // Defines the status of an order 
{
  OrderStatus status = 42; // Order status 
  Decimal trader_balance = 51; // Balance of the trading account (Bal)
  Decimal order_margin = 76; // Order margin 
  Decimal position_margin = 78; // Position margin 
  Decimal upnl = 79;  // Unrealized profit and loss
  Decimal pnl = 154;  // Profit and loss
  Decimal accum_quantity = 181; // The amount of orders placed by a trader for the last 8 hours (period between funding events)
  Decimal buy_order_margin = 118; // Margin of a buy order 
  Decimal sell_order_margin = 119; // Margin of a Sell order 
  Decimal buy_order_quantity = 182; // Sum of quantity under all Buy Orders 
  Decimal sell_order_quantity = 183; // Quantity of contracts in the sell order
  Decimal trader_balance_2 = 278; // For spot market, balance in base currency
  Decimal full_position_margin = 298; // Sum of Position Margin under all markets
  Decimal full_buy_order_margin = 299; // Sum of Buy Orders Margin under all markets
  Decimal full_sell_order_margin = 300; // Sum of Sell Orders Margin under all markets
  Decimal position_contracts = 104; // Sum of Quantity under all Contracts
  Decimal position_volume = 105; // Sum of (Entry Price * Quantity) under all Contracts
  Decimal position_liquidation_volume = 106; // Sum of (Liquidation Price * Quantity) under all Contracts (0.5 of margin)
  Decimal position_bankruptcy_volume = 117; // Sum of (Bankruptcy Price * Quantity) under all Contracts (full margin)
  OrderPosition position_type = 107; //Position of open Contracts
  Decimal mark_price = 52; // Spot Price 
  OrderType order_type = 32;  // Order type
  OrderSide side = 33; // Order side
  uint32 leverage = 34; // Order Leverage 
  OrderDuration duration = 35; // Order duration 
  Decimal price = 38; // Order Price
  Decimal quantity = 39; // Quantity of the Order
  Decimal paid_price = 66; // Price that trader paid for the order (Price / Leverage)
  uint64 old_contract_id = 57; // ID of the closed Contract
  Decimal volume = 279; // For spot market if Price * Quantity has been rounded
  int32 is_closing = 280; // Reduce Only flag 
  bytes order_client_id = 71;
  int64 order_timestamp = 72; // Time when the Order has been placed
  bytes orig_client_id = 204; // Used when Orded partialy matched, Order id (orig_client_id) is given to the initial Order in a chain 
  int64 open_time = 205; // Time when order was placed. May be used when Orded partialy matched, open_time defines the time when the new Order was placed
  Decimal orig_quantity = 206; // Used when Orded partialy matched, orig_quantity defines the quantity of the initial Order in a chain
  bytes orig_order_id = 327; // Order ID of the first order in chain
  uint32 order_flags = 348; // Not used, May be used for defining the order position in a queue
}

message LeverageMessage // Defines the Leverage size (per trader)
{
  uint32 leverage = 34; // Trader leverage size 
  repeated TradeMessage trades = 46; // Array of the Open Contracts   
  repeated OrderMessage orders = 70; // Array of the Orders 
  Decimal trader_balance = 51; // Balance on the trading account (Bal)
  Decimal order_margin = 76; // Order margin
  Decimal position_margin = 78; // Position margin
  Decimal upnl = 79;  // Unrealized profit and loss
  Decimal pnl = 154;  // Profit and loss
  Decimal accum_quantity = 181; // The amount of orders placed by a trader for the last 8 hours (period between funding events)
  Decimal position_contracts = 104; // Sum of Quantity under all Contracts 
  Decimal position_volume = 105; // Sum of (Entry Price * Quantity) under all Contracts
  Decimal position_liquidation_volume = 106; // Sum of (Liquidation Price * Quantity) under all Contracts (0.5 of margin)
  Decimal position_bankruptcy_volume = 117; // Sum of (Bankruptcy Price * Quantity) under all Contracts (full margin)
  OrderPosition position_type = 107; // Position of open Contracts
  Decimal buy_order_margin = 118; // Margin of a Buy Order
  Decimal sell_order_margin = 119; // Margin of a Sell Order
  Decimal last_trade_price = 113; // Last Trade Price (LTP)
  Decimal last_trade_quantity = 116; // Last Trade Quantity (on the ladder or Recent Trades (Amount column))
  int64 last_trade_timestamp = 296; // Time of the last Trade
  Decimal buy_order_quantity = 182; // Sum of quantity under all Buy Orders
  Decimal sell_order_quantity = 183; // Sum of quantity under all Sell Orders
  Decimal full_position_margin = 298; // Sum of Position Margin under all markets
  Decimal full_buy_order_margin = 299; // Sum of Buy Orders Margin under all markets
  Decimal full_sell_order_margin = 300; // Sum of Sell Orders Margin under all markets
}

message TradeMessage // Defines the Open Contract information
{
  int64 trade_timestamp = 69; // Time of Trade (when Contract was Opened or Closed)
  uint32 trade_trader_id = 74; // Trader ID who matched the order (Taker)
  OrderPosition position = 45; // Order Position
  Decimal price = 38; // Trade Price
  Decimal paid_price = 66; // Price that trader paid for the order (Price / Leverage)
  Decimal liquidation_price = 67; // The price at which the trade will be liquidated
  Decimal bankruptcy_price = 202; // Bankruptcy Price under the appropriate Contract, idicates the price at which a trader lost full margin related to the contract
  Decimal quantity = 39; // Quantity of the last trade
  Decimal exit_price = 166; // Average trade closing price
  uint32 leverage = 34; // Trade Leverage
  uint64 contract_id = 41; // Contract ID
  uint64 old_contract_id = 57; // ID of the previous contract in a contract chain
  bytes old_client_id = 65; // Order ID that was matched and as a result Contract was opened
  int32 is_increase = 164; // 'Reduce only' flag, defines if quantity in the Contract may increase
  int32 is_liquidation = 167; // Flag defines if Contract was liquidated
  int64 open_time = 194; // Time of creating the contracts chain
  Decimal entry_quantity = 195; // Total quantity of increments of contract chain
  Decimal exit_quantity = 196; // Total quantity of decrements of trade
  Decimal exit_volume = 197; // Exit quantity * Exit price, where Exit quantity - quantity of closed contracts and Exit Price - contract closing price 
  Decimal funding_paid_price = 198; // Total number of payout * qty in the trade (at the time of funding) for all fundings
  Decimal funding_quantity = 199; // Total quantity that was funded
  Decimal funding_volume = 200; // Amount of funds accrued during all fundings under the contracts chain
  int32 funding_count = 201; // The number of fundings that occurred during the existence of the current trade
  int32 is_funding = 203; // Flag indication that contract was changed based on funding event
  int32 is_maker = 207; // Maker of the Order 
  uint64 orig_contract_id = 208; // The initial Contrat ID of the chain 
  int32 is_settlement = 277; // Flag defines if Contract was liquidated during the maintenance (e.g. new release deployment)
  Decimal volume = 279; // For spot market if Price * Quantity has been rounded
}

message OrderFilledMessage // Received when Order was matched
{
  OrderStatus status = 42; // Order status 
  bytes new_client_id = 44; // Order ID of the new Order (for instanse, when Order was partially matched)
  OrderType order_type = 32;  // Order type
  OrderSide side = 33; // Order side
  uint32 leverage = 34; // Order leverage 
  OrderDuration duration = 35; // Order duration
  Decimal price = 38; // Order Price
  Decimal quantity = 39; // Quantity of the Order
  Decimal paid_price = 66; // Price that trader paid for the order (Price / Leverage)
  bytes orig_client_id = 204; // Used when Orded partialy matched, Order id (orig_client_id) is given to the initial Order in a chain 
  int64 open_time = 205; // Time when order was placed. May be used when Orded partialy matched, open_time defines the time when the new Order was placed
  Decimal orig_quantity = 206; // Used when Orded partialy matched, orig_quantity defines the quantity of the initial Order in a chain
  Decimal volume = 279; //  For spot market if Price * Quantity has been rounded
  Decimal dropped_quantity = 152; // Used when Orded partialy matched, dropped_quantity defines the quantity of the matched part
  bytes old_order_id = 153;  // Order ID that was matched, previous Order ID in a chain
  bytes orig_order_id = 327; // Order ID of the first order in chain
  Decimal trader_balance = 51; // Balance of the trading account (Bal)
  Decimal order_margin = 76; // Order margin
  Decimal position_margin = 78; // Position margin
  Decimal upnl = 79;  // Unrealized profit and loss
  Decimal pnl = 154;  // Profit and loss
  Decimal accum_quantity = 181; // The amount of orders placed by a trader for the last 8 hours (period between funding events)
  Decimal position_contracts = 104; // Sum of Quantity under all Contracts
  Decimal position_volume = 105; // Sum of (Entry Price * Quantity) under all Contracts 
  Decimal position_liquidation_volume = 106; // Sum of (Liquidation Price * Quantity) under all Contracts (0.5 of margin)
  Decimal position_bankruptcy_volume = 117; // Sum of (Bankruptcy Price * Quantity) under all Contracts (full margin)
  OrderPosition position_type = 107; // Position of open Contracts
  Decimal last_trade_price = 113; // Last Trade Price (LTP) 
  Decimal last_trade_quantity = 116; // Last Trade Quantity (on the ladder or Recent Trades (Amount column)) 
  int64 last_trade_timestamp = 296; // Time of the last Trade
  Decimal buy_order_margin = 118; // Margin of a Buy Order
  Decimal sell_order_margin = 119; // Margin of a Sell Order
  Decimal buy_order_quantity = 182; // Sum of quantity under all Buy Orders 
  Decimal sell_order_quantity = 183; // Sum of quantity under all Sell Orders 
  Decimal mark_price = 52; // Spot Price
  Decimal trader_balance_2 = 278; // For spot market, balance in base currency
  Decimal full_position_margin = 298; // Sum of Position Margin under all markets
  Decimal full_buy_order_margin = 299; // Sum of Buy Orders Margin under all markets
  Decimal full_sell_order_margin = 300; // Sum of Sell Orders Margin under all markets
  uint32 order_flags = 348; // Not used, May be used for defining the order position in a queue
  repeated TradeMessage trades = 46; // Array of the Open Contracts 
  repeated TradeMessage raw_trades = 82; // Array of new contracts created after matching the Order 
}

message ExchangeRateUpdateMessage // System message, indicates exchange rates on other trades for the particular currency pair 
{
  uint32 currency_pair_id = 47; // Currency pair id 
  Decimal volume = 48; // Quantity under the new base price
  Decimal quantity = 39; // Quantity under the new quote price
  int32 unreliable = 209; // Flag indicates source (external market) credibility 
  int32 source_count = 301; // The amount of sources (external markets) 
  bytes price_updater_id = 302; // ID of price updater (for now we have only one own price updater)
}

message ExchangeRatesUpdateMessage // System message, indicates exchange rates on other trades
{
  repeated ExchangeRatesUpdateMessage rates = 341; // Array of exchange rates on other trades
  bytes price_updater_id = 302; //  ID of price updater (for now we have only one own price updater)
}

message ExchangeRateMessage // System message, indicates exchange rates on other trades per particular currency pair 
{
  uint32 currency_pair_id = 47; // Currency pair id 
  Decimal mark_price = 52; // Spot Price
  Decimal sell_price = 114; // Recommended sell price, for example, for DGTX/BTC it is the price of purchase of one DGTX from the treasury
  Decimal buy_price = 115;  // Recommended buy price, for DGTX/BTC it is the price of byuing back DGTX to the treasury
  int32 unreliable = 209; // Flag indicates source (external market) credibility 
}

message TraderBalanceUpdateMessage // System message, in order to change trader balance
{
  uint32 currency_id = 49; // Currancy ID
  Decimal increment = 50; // Trader’s balance increasing in currency_id
}

message TraderBalanceMessage // Defines the trader's balance info
{
  uint32 currency_id = 49; // Currancy ID
  Decimal trader_balance = 51; // Balance of the trading account (Bal)
  Decimal order_margin = 76; // Order margin
  Decimal position_margin = 78; // Position margin
  Decimal upnl = 79;  // Unrealized profit and loss
  Decimal pnl = 154;  // Profit and loss
  Decimal accum_quantity = 181; // The amount of orders placed by a trader for the last 8 hours (period between funding events)
  Decimal position_contracts = 104; // Sum of Quantity under all Contracts
  Decimal position_volume = 105; // Sum of (Entry Price * Quantity) under all Contracts
  Decimal position_liquidation_volume = 106; // Sum of (Liquidation Price * Quantity) under all Contracts (0.5 of margin)
  Decimal position_bankruptcy_volume = 117; // Sum of (Bankruptcy Price * Quantity) under all Contracts (full margin)
  OrderPosition position_type = 107; // Position of open Contracts
  Decimal last_trade_price = 113; // Last Trade Price (LTP)
  Decimal last_trade_quantity = 116; // Last Trade Quantity (on the ladder or Recent Trades (Amount column))
  int64 last_trade_timestamp = 296; // Time of the last Trade
  Decimal buy_order_margin = 118; // Margin of a Buy Order
  Decimal sell_order_margin = 119; // Margin of a Sell Order
  Decimal buy_order_quantity = 182; // Sum of quantity under all Buy Orders 
  Decimal sell_order_quantity = 183; // Sum of quantity under all Sell Orders 
  Decimal full_position_margin = 298; // Sum of Position Margin under all markets
  Decimal full_buy_order_margin = 299; // Sum of Buy Orders Margin under all markets
  Decimal full_sell_order_margin = 300; // Sum of Sell Orders Margin under all markets
}

message PositionEventMessage // Defines the Position changes
{
  // Liquidated contracts are just taken from the trader
  repeated uint64 liquidated_contracts = 83; // DEPRECATED, see liquidated_trades
  repeated TradeMessage liquidated_trades = 168; // Array of the Liquidated Contracts
  repeated bytes terminated_orders = 96;     // DEPRECATED, see orders
  repeated OrderMessage orders = 70;         // Array of the Orders
    // the order parameters are reported
  repeated OrderMessage stop_loss_contracts = 84; // Not used, deprecated
  repeated OrderMessage take_profit_contracts = 85; // Not used, deprecated
  Decimal trader_balance = 51; // Balance of the trading account (Bal)
  Decimal order_margin = 76; // Order margin
  Decimal position_margin = 78; // Position margin
  Decimal upnl = 79;  // Unrealized profit and loss
  Decimal pnl = 154;  // Profit and loss
  Decimal accum_quantity = 181; // The amount of orders placed by a trader for the last 8 hours (period between funding events)
  Decimal position_contracts = 104; // Sum of Quantity under all Contracts
  Decimal position_volume = 105; // Sum of (Entry Price * Quantity) under all Contracts
  Decimal position_liquidation_volume = 106; // Sum of (Liquidation Price * Quantity) under all Contracts (0.5 of margin)
  Decimal position_bankruptcy_volume = 117; // Sum of (Bankruptcy Price * Quantity) under all Contracts (full margin)
  OrderPosition position_type = 107; // Position of open Contracts
  Decimal last_trade_price = 113; // Last Trade Price (LTP)
  Decimal last_trade_quantity = 116; // Last Trade Quantity (on the ladder or Recent Trades (Amount column))
  int64 last_trade_timestamp = 296; // Time of the last Trade
  Decimal buy_order_margin = 118; // Margin of a Buy Order
  Decimal sell_order_margin = 119; // Margin of a Sell Order
  Decimal trader_balance_increment = 134; // уточнить: минимальный шаг, на который баланс может измениться 
  Decimal buy_order_quantity = 182; // Sum of quantity under all Buy Orders 
  Decimal sell_order_quantity = 183; // Sum of quantity under all Sell Orders 
  Decimal full_position_margin = 298; // Sum of Position Margin under all markets
  Decimal full_buy_order_margin = 299; // Sum of Buy Orders Margin under all markets
  Decimal full_sell_order_margin = 300; // Sum of Sell Orders Margin under all markets
  Decimal mark_price = 52; // Spot Price
  Decimal floor_mark_price = 135; // Mark Price round down to the size chart 
  Decimal ceil_mark_price = 136; // Mark Price round up to the size chart 
}

message OrderBookRequestMessage // Request for Order Book of the appropriate market 
{
}

message OrderBookEntryMessage // Defines Price Point  
{
  Decimal price = 38; // Order Price
  Decimal quantity = 39; // Quantity of the Orders by the particular price  
  int64 entry_timestamp = 155; // Not used, defines time when Order was placed to the Order Book
}

message OrderBookTradeEntryMessage // Defines Order Book info refarding recent trades on the market 
{
  Decimal price = 38; // Order Price
  Decimal quantity = 39; // Quantity of the Orders by the particular price 
  int64 entry_timestamp = 155; // Not used, defines time when Order was placed to the Order Book
  OrderSide side = 33; // Taker side
}

message OrderBookMessage // Defines Order Book Info per OrderBookRequestMessage request 
{
  repeated OrderBookEntryMessage bids = 53; // The array of Bids related to the Order Book
  repeated OrderBookEntryMessage asks = 54; // The array of Asks related to the Order Book
  Decimal mark_price = 52; // Spot Price
  Decimal last_trade_price = 113; // Last Trade Price (LTP)
  Decimal last_trade_quantity = 116; // Last Trade Quantity (on the ladder or Recent Trades (Amount column))
  int64 last_trade_timestamp = 296; // Time of the last Trade
}

message OrderBookUpdatedMessage // Defines Order Book Info, no request required
{
  repeated OrderBookEntryMessage bid_updates = 58; // The array of the Updated Bids related to the Order Book
  repeated OrderBookEntryMessage ask_updates = 59; // The array of the Updated Asks related to the Order Book
  repeated OrderBookEntryMessage trades = 60; // The array of the created Trades
  repeated OrderBookTradeEntryMessage trades2 = 292; // The array of the created Trades but with Trade Side that defines the trade color in the Recent Trades panel (red color means Sell side, green color means Buy side)
  Decimal mark_price = 52; // Spot Price
  int64 last_full_timestamp = 55; // Time when the last Order book was sent by engine
  int64 update_serial = 56; // ID of Update Event
  Decimal last_trade_price = 113; // Last Trade Price (LTP)
  Decimal last_trade_quantity = 116; // Last Trade Quantity (on the ladder or Recent Trades (Amount column))
  int64 last_trade_timestamp = 296; // Time of the last Trade
}

message PingMessage // Message for checking connection with engine 
{
}

message PongMessage // Engine response to PingMessage
{
  uint32 ping_sender = 61; // Sender of PingMessage that was set in envelope Message
  uint64 ping_serial = 62; // Serial of PingMessage that was set in envelope Message 
  int64  ping_timestamp = 63; // Ping of PingMessage that was set in envelope Message
}

message GetTraderStatusMessage // Trader Status Request in order ot receive TraderStatusMessage
{
}

message OrderMessage // Defines Order Info 
{
  bytes order_client_id = 71;   // FIXME: rename to order_id  // Client order UUID
  int64 order_timestamp = 72; // Time when the Order has been placed
  uint32 order_trader_id = 73; // Trader ID who placed the order (Maker)
  OrderType order_type = 32;  // Order type
  OrderSide side = 33; // Order side
  uint32 leverage = 34;  // Order leverage
  OrderDuration duration = 35; // Order duration
  Decimal price = 38;  // Order price
  Decimal quantity = 39;  // Quantity of the Order
  Decimal paid_price = 66; // Price that trader paid for the order (Price / Leverage)
  Decimal volume = 279; // For spot market if Price * Quantity has been rounded
  uint64 contract_id = 41; // Contract ID
  bytes old_client_id = 153;    // FIXME: rename to old_order_id
  bytes orig_client_id = 204; // Used when Orded partialy matched, Order id (orig_client_id) is given to the initial Order in a chain 
  int64 open_time = 205; // Time when order was placed. May be used when Orded partialy matched, open_time defines the time when the new Order was placed
  Decimal orig_quantity = 206; // Used when Orded partialy matched, orig_quantity defines the quantity of the initial Order in a chain
  int32 is_closing = 280; // 'Reduce only' flag, defines if quantity in the Order may increase
  int32 may_increase = 293; // Flag defines that Order may increase a position
  bytes orig_order_id = 327; // Order ID of the first order in chain
  uint32 order_flags = 348; // Not used, May be used for defining the order position in a queue
}

message TraderStatusMessage // Defines Trader Status info, response to GetTraderStatusMessage, UpdateContractMessage, UpdateAllContractsMessage?
{
  Decimal trader_balance = 51; // Balance of the trading account (Bal)
  Decimal order_margin = 76; // Order margin
  Decimal position_margin = 78; // Position margin
  Decimal upnl = 79;  // Trader unrealized profit and loss
  Decimal pnl = 154;  // Trader profit and loss
  Decimal accum_quantity = 181; // The amount of orders placed by a trader for the last 8 hours (period between funding events)
  Decimal mark_price = 52; // Spot Price
  Decimal position_contracts = 104; // Sum of Quantity under all Contracts
  Decimal position_volume = 105; // Sum of (Entry Price * Quantity) under all Contracts
  Decimal position_liquidation_volume = 106; // Sum of (Liquidation Price * Quantity) under all Contracts (0.5 of margin)
  Decimal position_bankruptcy_volume = 117; // Sum of (Bankruptcy Price * Quantity) under all Contracts (full margin)
  OrderPosition position_type = 107; // Position of open Contracts
  Decimal last_trade_price = 113; // Last Trade Price (LTP)
  Decimal last_trade_quantity = 116; // Last Trade Quantity (on the ladder or Recent Trades (Amount column))
  int64 last_trade_timestamp = 296; // Time of the last Trade
  Decimal buy_order_margin = 118; // Margin of a Buy Order
  Decimal sell_order_margin = 119; // Margin of a Sell Order
  repeated TradeMessage trades = 46; // Array of the Open Contracts 
  repeated OrderMessage orders = 70; // Array of the Orders
  uint32 leverage = 34; // Trader leverage
  Decimal buy_order_quantity = 182; // Sum of quantity under all Buy Orders 
  Decimal sell_order_quantity = 183; // Sum of quantity under all Sell Orders 
  Decimal trader_balance_2 = 278; // For spot market, balance in base currency
  repeated DelayedActionMessage delayed_actions = 288; // The array of the delayed actions
  Decimal full_position_margin = 298; // Sum of Position Margin under all markets
  Decimal full_buy_order_margin = 299; // Sum of Buy Orders Margin under all markets
  Decimal full_sell_order_margin = 300; // Sum of Sell Orders Margin under all markets
}

message ControlMessage // System message, TBU
{
  ControlCommand control_command = 80;
  uint32 other_trader_id = 112;
  Decimal funding_rate = 128; // Funding rate indicates which positions should pay to traders with the opposite positions at the Funding event
  Decimal last_trade_price = 113; // Last Trade Price (LTP)
  uint32 value_code = 186;
  uint32 value_type = 193;
  uint64 value_uint64 = 187; // Generic value
  int64 value_int64 = 188; // Generic value
  Decimal value_decimal = 189; // Generic value
  double value_double = 190; // Generic value
  string value_string = 191; // Generic value
  bytes value_bytes = 192; // Generic value
}

message ControlResultMessage // System message, TBU
{
  ControlCommand control_command = 80;
  uint32 value_code = 186;
  uint32 value_type = 193;
  uint64 value_uint64 = 187; // Generic value
  int64 value_int64 = 188; // Generic value
  Decimal value_decimal = 189; // Generic value
  double value_double = 190; // Generic value
  string value_string = 191; // Generic value
  bytes value_bytes = 192; // Generic value
}

message FundingMessage // Message received after Funding event 
{
  repeated TradeMessage trades = 46; // Array of the Open Contracts 
  Decimal trader_balance = 51; // Balance of the trading account (Bal)
  Decimal order_margin = 76; // Order margin
  Decimal position_margin = 78; // Position margin
  Decimal upnl = 79;  // Unrealized profit and loss
  Decimal pnl = 154;  // Profit and loss
  Decimal accum_quantity = 181; // The amount of orders placed by a trader for the last 8 hours (period between funding events)
  Decimal position_contracts = 104; // Sum of Quantity under all Contracts
  Decimal position_volume = 105; // Sum of (Entry Price * Quantity) under all Contracts
  Decimal position_liquidation_volume = 106; // Sum of (Liquidation Price * Quantity) under all Contracts (0.5 of margin)
  Decimal position_bankruptcy_volume = 117; // Sum of (Bankruptcy Price * Quantity) under all Contracts (full margin)
  OrderPosition position_type = 107; // Position of open Contracts
  Decimal buy_order_margin = 118; // Margin of a Buy Order
  Decimal sell_order_margin = 119; // Margin of a Sell Order
  Decimal payout_per_contract = 102; // Payout per Contract
  Decimal payout = 101; // Payout for all Contracts 
  Decimal last_trade_price = 113; // Last Trade Price (LTP)
  Decimal last_trade_quantity = 116; // Last Trade Quantity (on the ladder or Recent Trades (Amount column))
  int64 last_trade_timestamp = 296; // Time of the last Trade
  Decimal mark_price = 52; // Spot Price
  Decimal position_margin_change = 163; // Defines how much position changed, measured in currency
  Decimal buy_order_quantity = 182; // Sum of quantity under all Buy Orders 
  Decimal sell_order_quantity = 183; // Sum of quantity under all Sell Orders 
  Decimal full_position_margin = 298; // Sum of Position Margin under all markets
  Decimal full_buy_order_margin = 299; // Sum of Buy Orders Margin under all markets
  Decimal full_sell_order_margin = 300; // Sum of Sell Orders Margin under all markets
  int64 funding_time = 127; // Remaining time until the next funding event
  FundingType funding_type = 340; // Funding Type
}

message OHLCVMessage // Defines the time frame length of the trading chart (e.g. for bulding the one candle)
{
  Decimal open_price = 87;  // Open OHLCV (open-high-low-close chart) price of the time frame length 
  Decimal high_price = 88;  // The highest OHLCV (open-high-low-close chart) price of the time frame length 
  Decimal low_price = 89;  // The lowest OHLCV (open-high-low-close chart) price of the time frame length 
  Decimal close_price = 90;  // Close OHLCV (open-high-low-close chart) price of the time frame length 
  Decimal volume = 48;  // Quantity: measured in the quantity of Contracts on Futures markets and in the amount of currency on Spot markets
  Decimal average_oracle_price = 130; // Average Spot Price of the time frame length 
  int64 timestamp = 2;  // Unix Timestamp, exact time in milliseconds ??
}

message OHLCVListMessage // Defines the all trading chart info 
{
  repeated OHLCVMessage ohlcvs = 91; // Array of the time frame lengths 
  Decimal last_trade_price = 113; // Last Trade Price (LTP)
  Decimal last_trade_quantity = 116; // Last Trade Quantity (on the ladder or Recent Trades (Amount column))
  int64 last_trade_timestamp = 296; // Time of the last Trade
}

message TradeListMessage // Defines the list of Open Contracts
{
  repeated TradeMessage trades = 46; // Array of the Open Contracts 
}

message SubscribeMessage // Used for subscribing and unsubscribing from received info (messages) via marketdata channel 
{
  uint64 subscribe_mask = 94; // Binary mask (e.g. 01111), each digit corresponds to a certain type of message, where 1 means that we want to receive the certain message type and 0 if we don’t want to change the subcsription (skip the appropriate message type)
  uint64 unsubscribe_mask = 95; // Binary mask (e.g. 01111), where 1 means we want to unsubscribe from the certain message type and 0 if we don’t want to change the subcsription (skip the appropriate message type)
}

message SubscribeStatusMessage // Response to SubscribeMessage
{
  uint64 subscribe_mask = 94; // Binary mask (e.g. 01111), each digit corresponds to a certain type of message, where 1 means that we want to receive the certain message type and 0 if we don’t want to change the subcsription (skip the appropriate message type)
}

/* the engine replies with TraderStatusMessage */
message UpdateContractMessage // Request to update the particular Contract 
{
  uint64 contract_id = 41; // Contract ID is going to be changed 
  uint32 leverage = 34; // Contract leverage
}

/* the engine replies with TraderStatusMessage */
message UpdateAllContractsMessage // Request to update all Contracts
{
  uint32 update_mask = 77;  // update bitmask: stop_loss: 1, take_profit: 2, leverage: 4; stop_loss and stop_loss_type are updated at once
  uint32 leverage = 34; // Contract leverage
}

message CloseContractMessage // Request to close the particulat Contract 
{
  uint64 contract_id = 41; // Contract ID is going to be closed 
  OrderType order_type = 32; // Order type
  Decimal price = 38; // Contract Price
  Decimal quantity = 39; // Defines how much of a contract should be closed
  uint32 order_flags = 348; // Not used, May be used for defining the order position in a queue
}

message CloseAllContractsMessage // Request to close all Contracts
{
  OrderType order_type = 32;  // Order type
  Decimal price = 38; // Contract Price
  uint32 order_flags = 348; // Not used, May be used for defining the order position in a queue
}

message UpdateTraderSettingsMessage // System message
{
  uint32 update_mask = 77;
  sint32 rate_limit_sec_increment = 99; // Changes in quantity of messages a user can send per a second
}

message TraderSettingsMessage // System message
{
  int32 rate_limit_sec = 100; // Quantity of messages a user can send per a second
}

message OrderCanceledMessage // Defines info refarding Canceled Order, response to CancelOrderMessage 
{
  OrderStatus status = 42; // Order status 
  bytes prev_client_id = 40; // Cancelled Order ID
  repeated bytes order_ids = 103; // Array of ID of canceled Orders
  repeated OrderMessage orders = 70; // Array of the Canceled Orders
  Decimal trader_balance = 51; // Balance of the trading account (Bal)
  Decimal order_margin = 76; // Order margin
  Decimal position_margin = 78; // Position margin
  Decimal upnl = 79;  // Unrealized profit and loss
  Decimal pnl = 154;  // Profit and loss
  Decimal accum_quantity = 181; // The amount of orders placed by a trader for the last 8 hours (period between funding events)
  Decimal buy_order_margin = 118; // Margin of a Buy Order
  Decimal sell_order_margin = 119; // Margin of a Sell Order
  Decimal buy_order_quantity = 182; // Sum of quantity under all Buy Orders 
  Decimal sell_order_quantity = 183; // Sum of quantity under all Sell Orders 
  Decimal trader_balance_2 = 278; // For spot market, balance in base currency
  Decimal full_position_margin = 298; // Sum of Position Margin under all markets
  Decimal full_buy_order_margin = 299; // Sum of Buy Orders Margin under all markets
  Decimal full_sell_order_margin = 300; // Sum of Sell Orders Margin under all markets
  Decimal mark_price = 52; // Spot Price
}

message EngineStatusMessage // System message, TBU
{
  string market_name = 250;
  string market_description = 269;
  int64 funding_interval = 162; // Funding period indicates how often Funding event happen (every 8 hours for now) 
  int64 alert_timestamp = 210;
  string alert_text = 211;
  int64 engine_start_timestamp = 214;
  int32 trading_suspended = 108;
  int32 funding_suspended = 109;
  int32 withdrawals_suspended = 110;
  int32 closed = 111;
  int32 operations_suspended = 215;
  int32 liquidations_suspended = 216;
  int32 deposits_suspended = 270;
  Decimal insurance_fund_loss_ratio = 268;
  uint32 soft_max_leverage = 271;
  uint32 hard_max_leverage = 272;
  Decimal max_loss = 273;
  Decimal max_position = 274;
  int32 position_increase_suspended = 275;
  int32 position_decrease_suspended = 276;
}

message GetMarketStateMessage // Request to get the the appropriate market state 
{
}

message DailyStatisticsMessage // Defines info of the appropriate market by the last 24 hours
{
  int64 start_timestamp = 124; 
  Decimal volume = 125; // Sum of trades quantity: measured in the quantity of Contracts on Futures markets and in the ammount of currency on Spot markets
  Decimal gross = 126; // Sum of trades quantity: measured in quantity in $ on Futures markets and in quantity in quote currency on Spot markets
  Decimal high_price = 156; // The highest price by the last 24 hours
  Decimal low_price = 157; // The lowest price by the last 24 hours
}

message MarketStateMessage // Defines the state of the appropriate market, response to GetMarketStateMessage
{
  repeated TradeMessage trades = 46; // Array of the Open Contracts 
  repeated OHLCVMessage ohlcvs = 91; // Array of the time frame lengths 
  Decimal last_trade_price = 113; // Last Trade Price (LTP)
  Decimal last_trade_quantity = 116; // Last Trade Quantity (on the ladder or Recent Trades (Amount column))
  int64 last_trade_timestamp = 296; // Time of the last Trade
  int64 event_timestamp = 122; 
  repeated DailyStatisticsMessage daily_stats = 123; // Array of Market states, includes info the last and current day 
  int64 funding_time = 127; // Remaining time until the next funding event
  Decimal funding_rate = 128; // Funding rate indicates which positions should pay to traders with the opposite positions at the Funding event
  Decimal next_funding_rate = 129;  // Funding rate for the next period 
  Decimal tick_value = 131; // Measure of the minimum upward or downward movement in the price of an asset. For example, a Tick Size of $5 means that the price of the futures is changing by $5 i.e. $0, $5, $10
  Decimal tick_price = 132; // Contract price increment. This value is used in money change from USD to DGTX within the exchange. Denominated in DGTX, each market has a different exact value.
  Decimal contract_value = 133; // Last trade price (value of 1 contract)
  int64 funding_interval = 162; // Funding period indicates how often Funding event happen (every 8 hours for now) 
  Decimal payout_per_contract = 102; // Payout per Contract
  int64 alert_timestamp = 210; // Defines time when the alert should be shown to a user (not used)
  string alert_text = 211; // Defines text alert (not used)
  Decimal open_interest = 295; // Number of all existing futures contracts in the market at the moment
  Decimal insurance_fund = 297;
}

message MarketStateUpdateMessage // Recieved info regarding Market State changes
 {
  repeated TradeMessage trades = 46; // Array of the Open Contracts 
  repeated OHLCVMessage ohlcvs = 91; // Array of the time frame lengths 
  Decimal last_trade_price = 113; // Last Trade Price (LTP)
  Decimal last_trade_quantity = 116; // Last Trade Quantity (on the ladder or Recent Trades (Amount column))
  int64 last_trade_timestamp = 296; // Time of the last Trade
  int64 event_timestamp = 122;
  repeated DailyStatisticsMessage daily_stats = 123; // Array of Market states, includes info the last and current day 
  int64 funding_time = 127; // Remaining time until the next funding event
  Decimal funding_rate = 128; // Funding rate indicates which positions should pay to traders with the opposite positions at the Funding event
  Decimal next_funding_rate = 129; // Funding rate for the next period 
  int64 funding_interval = 162; // Funding period indicates how often Funding event happen (every 8 hours for now) 
  Decimal impact_base_quantity = 137;
  Decimal dgtx_to_base_price = 138;
  Decimal impact_value = 158;
  Decimal impact_quantity = 140;
  Decimal impact_bid_value = 141;
  Decimal impact_bid_count = 159;
  Decimal impact_ask_value = 142;
  Decimal impact_ask_count = 160;
  Decimal future_value = 143;
  Decimal future_count = 161;
  Decimal spot_price = 139; // Spot Price 
  Decimal quote_interest_rate = 150; // Indicative interest rate for borrowing quote (USD) DAILY
  Decimal base_interest_rate = 151; // Indicative interest rate for borrowing base (BTC) DAILY
  Decimal effective_rate = 145; // Current funding rate proportional to the time before the next funding
  Decimal fair_price = 146; // Futures price adjusted
  Decimal premium_index = 147; // Premium index
  Decimal premium_index_sum = 148; // Used for average computation ?
  Decimal premium_index_count = 149; // Used for average computation ?
  Decimal payout_per_contract = 102; // Payout per Contract
  Decimal next_payout_per_contract = 144; 
  int64 alert_timestamp = 210;
  string alert_text = 211;
  Decimal open_interest = 295;
  Decimal insurance_fund = 297;
  bool trading_suspended = 349;
  int64 next_resume_time = 350;
  int64 next_suspend_time = 351;
}

message InternalMarketStateUpdateMessage // System message, TBU
{
  int64 event_timestamp = 122; 
  string market_name = 250;
  string health = 251;
  repeated OHLCVMessage ohlcvs = 91; // Array of the time frame lengths 
  Decimal last_trade_price = 113; // Last Trade Price (LTP)
  Decimal last_trade_quantity = 116; // Last Trade Quantity (on the ladder or Recent Trades (Amount column))
  int64 last_trade_timestamp = 296; // Time of the last Trade
  repeated DailyStatisticsMessage daily_stats = 123; // Array of Market states, includes info the last and current day 
  int64 funding_time = 127; // Remaining time until the next funding event
  Decimal funding_rate = 128; // Funding rate indicates which positions should pay to traders with the opposite positions at the Funding event
  Decimal next_funding_rate = 129; //Funding rate for the next period 
  int64 funding_interval = 162; // Funding period indicates how often Funding event happen (every 8 hours for now) 
  Decimal spot_price = 139; // Spot Price 
  Decimal payout_per_contract = 102; // Payout per Contract
  Decimal next_payout_per_contract = 144;
  int64 alert_timestamp = 210;
  string alert_text = 211;
  int64 engine_start_timestamp = 214;
  int32 trading_suspended = 108;
  int32 funding_suspended = 109;
  int32 withdrawals_suspended = 110;
  int32 closed = 111;
  int32 operations_suspended = 215;
  int32 liquidations_suspended = 216;
  int32 check_engine = 217;
  Decimal min_allowed_spot_price = 218;
  Decimal max_allowed_spot_price = 219;
  Decimal total_buy_order_quantity = 220;
  Decimal total_sell_order_quantity = 221;
  Decimal total_buy_order_volume = 222;
  Decimal total_sell_order_volume = 223;
  Decimal total_buy_order_margin = 224;
  Decimal total_sell_order_margin = 225;
  uint32 order_trader_count = 226;
  uint32 order_count = 227;
  Decimal total_long_quantity = 228;
  Decimal total_short_quantity = 229;
  Decimal total_long_entry_volume = 230;
  Decimal total_short_entry_volume = 231;
  Decimal total_long_paid_volume = 232;
  Decimal total_short_paid_volume = 233;
  Decimal total_long_funding_paid_volume = 234;
  Decimal total_short_funding_paid_volume = 235;
  Decimal total_long_margin = 236;
  Decimal total_short_margin = 237;
  Decimal trader1_quantity = 238;
  Decimal trader2_quantity = 239;
  Decimal trader1_entry_volume = 240;
  Decimal trader2_entry_volume = 241;
  Decimal trader1_funding_paid_volume = 242;
  Decimal trader2_funding_paid_volume = 243;
  uint32 trade_trader_count = 244;
  uint32 trade_count = 245;
  Decimal total_balance = 246;
  Decimal trader1_balance = 247;
  Decimal trader2_balance = 248;
  uint32 balance_trader_count = 249;
  uint32 trade_count_last_min = 256;
  Decimal trade_quantity_last_min = 252;
  Decimal trade_volume_last_min = 253;
  Decimal profit_last_min = 254;
  Decimal loss_last_min = 255;
  uint32 liquidation_count_last_min = 257;
  Decimal liquidation_quantity_last_min = 258;
  Decimal liquidation_volume_last_min = 259;
  Decimal liquidation_paid_volume_last_min = 265;
  Decimal liquidation_funding_paid_volume_last_min = 266;
  Decimal liquidation_margin_last_min = 267;
  uint64 in_messages_last_min = 260;
  uint64 trade_messages_last_min = 261;
  uint32 near_liquidation_count = 262;
  Decimal near_liquidation_quantity = 263;
  Decimal near_liquidation_volume = 264;
  Decimal insurance_fund_loss_ratio = 268;
  uint32 active_trader_count_last_min = 342;
  uint32 active_trader_count_last_5m = 343;
  uint32 active_trader_count_last_1h = 344;
  uint32 active_trader_count_last_1d = 345;
  bool liquidity_reward_enabled = 346;
  Decimal liquidity_reward_per_min = 347;
}

message GetExchangeRatesMessage // Request for getting info regarding rate of all currency pairs exchange
{
}

message ExchangeRateItemMessage // Defines the info regarding rate of the particular currency pair exchange
{
  uint32 currency_pair_id = 47; // Currency pair ID 
  Decimal mark_price = 52; // Spot Price
  Decimal sell_price = 114; // Recommended sell price, for example, for DGTX/BTC it is the price of purchase of one DGTX from the treasury
  Decimal buy_price = 115;  // Recommended buy price, for DGTX/BTC it is the price of byuing back DGTX to the treasury
  int64 last_update_time = 121; // Fetch time (when info was collected) 
  int32 unreliable = 209; // Flag indicates source (external market) credibility 
}

message ExchangeRatesMessage // Defines the info regarding rate of all currency pairs exchange, response to GetExchangeRatesMessage
{
  repeated ExchangeRateItemMessage items = 120; // Array of the currency pairs 
}

message ContractClosedMessage // Identifies Contract closure, response to CloseContractMessage
{
  repeated bytes order_ids = 103; // Array of Order IDs
}

message ContractTransferredMessage // Defines the new system user who owned the Contract during liqudation (System message)
{
  uint64 old_contract_id = 57; // ID of the previous contract in contracts chain
  uint32 old_trader_id = 165; // ID of the previous trader
  bytes new_client_id = 44; // Order ID of the new Order 
}

// to engine
message StartRunMessage  // DEPRECATED
{
  uint32 new_trader_id = 169;        // mandatory, must not be used before
  int64 start_timestamp = 124;       // optional, the engine sets the start_timestamp to the current time
  int64 run_duration = 170;          // mandatory, microseconds
  uint32 run_id = 179;               // optional, saved by the engine
  uint32 tournament_id = 180;        // optional, saved by the engine
  Decimal initial_balance = 171;     // mandatory
  uint32 max_leverage = 172;         // optional, the default value (100) if not specified
  Decimal max_position = 173;        // optional, the default value if not specified
  int32 enable_transfer = 174;       // optional, false by default, which blocks transfers to/from trading account
  int32 enable_main_trading = 175;   // optional, false by default, which disables switching to/from the main trader_id
  int32 rate_limit_sec = 100;        // optional, Quantity of messages a user can send per a second
  uint32 leverage = 34;              // optional, the initial leverage
}

// from engine
message RunStartedMessage  // DEPRECATED
{
  uint32 new_trader_id = 169;
  uint32 run_id = 179;
  uint32 tournament_id = 180;
  int64 start_timestamp = 124;
  int64 run_duration = 170;
}

// to engine
message FinishRunMessage  // DEPRECATED
{
}

// from engine
message RunFinishedMessage  // DEPRECATED
{
  uint32 orig_trader_id = 177;
  uint32 run_id = 179;
  uint32 tournament_id = 180;
  int64 start_timestamp = 124;
  int64 finish_timestamp = 178;
  Decimal pnl = 154;  // Current profit and loss
  Decimal accum_quantity = 181; // The amount of orders placed by a trader for the last 8 hours (period between funding events)
}

// to engine
message UpdateContestTraderSettingsMessage  // DEPRECATED
{
  uint32 update_mask = 77;
  sint32 max_leverage_increment = 184;
  Decimal max_position_increment = 185;
}

// from engine
message ContestTraderSettingsMessage  // DEPRECATED
{
  uint32 max_leverage = 172;
  Decimal max_position = 173;
}

message GetTraderBalanceMessage // Request to engine in order to receive Trader Balance 
{
  uint32 currency_id = 49; // Currancy ID
}

message UpdateTraderBalanceMessage // Request to engine in order to update Trader Balance (System message) 
{
  uint32 currency_id = 49; // Currancy ID
  Decimal increment = 50; // Trader’s balance increasing in currency_id
  uint32 seed = 212; 
  bytes signature = 213;  // Signature from /user/sign_request
}

message TraderBalanceUpdatedMessage // Defines the new trader balance, response to UpdateTraderBalanceMessage (System message)
{
  uint32 currency_id = 49; // Currancy ID
  Decimal increment = 50; // Trader’s balance increasing in currency_id
  Decimal trader_balance = 51; // Balance of the trading account (Bal)
  Decimal order_margin = 76; // Order margin
  Decimal position_margin = 78; // Position margin
  Decimal full_position_margin = 298; // Sum of Position Margin under all markets
  Decimal full_buy_order_margin = 299; // Sum of Buy Orders Margin under all markets
  Decimal full_sell_order_margin = 300; // Sum of Sell Orders Margin under all markets
}

message DelayedActionMessage // Defines the info per one delayed action
{
  int64 delayed_action_timestamp = 291; // Time when delayed action was created
  bytes delayed_action_client_id = 289; // ID of the future Order, that will be created if delayed action happened
  bytes delayed_action_id = 328; // Delayed action ID
  bytes old_delayed_action_id = 329; // ID of the initial delayed action if delayed action updated (updated delayed action received the new ID)
  bytes old_delayed_action_client_id = 290; // ID of the initial future Order, that will be created if delayed action updated (future Order received the new ID)
  DelayedActionType action_type = 281;  // Action type of delayed action
  DelayedTriggerVariable trigger_variable = 282;  // Variable in the condition for placing an order
  DelayedTriggerCondition trigger_condition = 283;  // Comparison type in the condition of placing an order
  Decimal trigger_value = 284;  // Numerical threshold in the condition for placing an order
  OrderMessage order = 287;  // Info regarding the future order that will be created if delayed action happened
}

message PlaceDelayedActionMessage // Request to place the delayed action
{
  DelayedActionMessage delayed_action = 285; // Delayed action info
}

message UpdateDelayedActionMessage // Request to update the delayed action
{
  bytes prev_client_id = 40; // Order id is going to be updated
  DelayedActionMessage delayed_action = 285; // Delayed action info
}

message CancelDelayedActionMessage // Request to cancel the delayed action
{
  bytes prev_client_id = 40; // Order id is going to be cancelled
  int32 all_for_trader = 286;
}

message DelayedActionStatusMessage // Defines the info regarding delayed actions
{
  OrderStatus status = 42; // Order status 
  repeated DelayedActionMessage delayed_actions = 288; // The array of the delayed actions
}

message LiquidationEntryMessage
{
  Decimal liquidation_price = 67; // The price at which the trade will be liquidated
  Decimal quantity = 39; // Quantity of the Order
  int64 entry_timestamp = 155;
  OrderPosition position = 45; // Order Position
}

message LiquidationsMessage
{
  repeated LiquidationEntryMessage liquidation_entries = 294;
}

message FundingInfoMessage
{
  int64 funding_time = 127; // Remaining time until the next funding event
  Decimal funding_rate = 128; // Funding rate indicates which positions should pay to traders with the opposite positions at the Funding event
  Decimal payout_per_contract = 102; // Payout per Contract
  Decimal open_interest = 295;
}

message ErrorMessage // Defines the error code
{
}

message MarketTraderStatisticsMessage
{
  int64 event_timestamp = 122; // Time of receiving the market state, in other words event (one per minute)
  Decimal buy_order_quantity = 182; // Sum of quantity under all Buy Orders 
  Decimal sell_order_quantity = 183; // Sum of quantity under all Sell Orders 
  Decimal buy_order_volume = 303; // Amount of all Buy Orders per particular market
  Decimal sell_order_volume = 304; // Amount of all Sell Orders per particular market
  Decimal buy_order_paid_volume = 323; // 
  Decimal sell_order_paid_volume = 324;
  Decimal buy_order_margin = 118; // Margin of a Buy Order
  Decimal sell_order_margin = 119; // Margin of a Sell Order
  uint32 order_count = 227;
  OrderPosition position_type = 107; // Position of open Contracts
  Decimal position_contracts = 104; // Sum of Quantity under all Contracts
  Decimal position_volume = 105; // Sum of (Entry Price * Quantity) under all Contracts
  Decimal position_liquidation_volume = 106; // Sum of (Liquidation Price * Quantity) under all Contracts (0.5 of margin)
  Decimal position_bankruptcy_volume = 117; // Sum of (Bankruptcy Price * Quantity) under all Contracts (full margin)
  Decimal position_paid_volume = 305;
  Decimal position_funding_paid_volume = 306;
  Decimal position_margin = 78; // Position margin
  uint32 position_count = 307;
  Decimal trader_balance = 51; // Balance of the trading account (Bal)
  Decimal trader_balance_2 = 278; // For spot market, balance in base currency
  uint32 maker_trade_count_last_min = 313;
  Decimal maker_trade_quantity_last_min = 314;
  Decimal maker_trade_volume_last_min = 315;
  Decimal maker_trade_paid_volume_last_min = 325;
  uint32 taker_trade_count_last_min = 316;
  Decimal taker_trade_quantity_last_min = 317;
  Decimal taker_trade_volume_last_min = 318;
  Decimal taker_trade_paid_volume_last_min = 326;
  Decimal profit_last_min = 254;
  Decimal profit_2_last_min = 319;
  Decimal loss_last_min = 255;
  Decimal loss_2_last_min = 320;
  Decimal funding_last_min = 308;
  Decimal deposit_last_min = 309;  // The amount of money the user has deposited in a last minute
  Decimal deposit_2_last_min = 321;  // The amount of money the user has deposited in last 2 minutes
  Decimal withdrawal_last_min = 310;  // The amount of money the user has withdrawn in a last minute
  Decimal withdrawal_2_last_min = 322;  // The amount of money the user has withdrawn in last 2 minutes
  uint32 liquidation_count_last_min = 257;
  Decimal liquidation_quantity_last_min = 258;
  Decimal liquidation_volume_last_min = 259;
  Decimal liquidation_paid_volume_last_min = 265;
  Decimal liquidation_funding_paid_volume_last_min = 266;
  Decimal liquidation_margin_last_min = 267;
  uint32 place_order_messages_last_min = 330;
  uint32 cancel_order_messages_last_min = 331;
  uint32 update_order_messages_last_min = 332;
  Decimal buy_placed_orders_quantity_last_min = 333;
  Decimal sell_placed_orders_quantity_last_min = 334;
  Decimal buy_cancelled_orders_quantity_last_min = 335;
  Decimal sell_cancelled_orders_quantity_last_min = 336;
  Decimal buy_matched_orders_quantity_last_min = 337;
  Decimal sell_matched_orders_quantity_last_min = 338;
  uint32 delayed_count = 311;
  uint32 triggered_delayed_count_last_min = 312;
  uint64 in_messages_last_min = 260;
  uint64 trade_messages_last_min = 261;
  double market_market_score = 339;
}

message Message
{
  MessageType msg_type = 1; // Type of a message 
  int64 timestamp = 2;  // Unix Timestamp, exact time in milliseconds
  uint32 sender = 3;  // Engine ID that sends messages (always one now)
  uint64 serial = 4;  // Message ID (global message counter)
  uint32 market_id = 5;  // Market ID to which the message belongs
  uint32 trader_id = 6;  // User ID by which the information is received in the message
  bytes client_id = 7;  // Order ID 
  uint32 error_code = 43;  // Error code
  int64 session_id = 8;  // Session ID (Not Used)
  bytes auth = 9;  // User signature to send message (Not Used)
  oneof kontent  // Fields are filled in depending on the msg_type value (if msg_type = MessageType.PLACE_ORDER (513), then PlaceOrderMessage field is filled, others are undefined)
  {
    PlaceOrderMessage place_order_msg = 513; 
    CancelOrderMessage cancel_order_msg = 514;
    CancelAllOrdersMessage cancel_all_orders_msg = 515;
    ChangeLeverageMessage change_leverage_msg = 516;
    OrderStatusMessage order_status_msg = 517;
    OrderFilledMessage order_filled_msg = 518;
    ChangeLeverageAllMessage change_leverage_all_msg = 519;
    ExchangeRateUpdateMessage exchange_rate_update_msg = 520;
    TraderBalanceUpdateMessage trader_balance_update_msg = 521;
    TraderBalanceMessage trader_balance_msg = 522;
    PositionEventMessage position_event_msg = 523;
    LeverageMessage leverage_msg = 524;
    ExchangeRateMessage exchange_rate_msg = 525;
    OrderBookRequestMessage order_book_request_msg = 526;
    OrderBookMessage order_book_msg = 527;
    OrderBookUpdatedMessage order_book_updated_msg = 528;
    PingMessage ping_msg = 529;
    PongMessage pong_msg = 530;
    UpdateOrderMessage update_order_msg = 531;
    GetTraderStatusMessage get_trader_status_msg = 532;
    TraderStatusMessage trader_status_msg = 533;
    ControlMessage control_msg = 534;
    FundingMessage funding_msg = 535;
    OHLCVListMessage ohlcv_list_msg = 536;
    TradeListMessage trade_list_msg = 537;
    SubscribeMessage subscribe_msg = 538;
    SubscribeStatusMessage subscribe_status_msg = 539;
    UpdateContractMessage update_contract_msg = 540;
    UpdateAllContractsMessage update_all_contracts_msg = 541;
    CloseContractMessage close_contract_msg = 542;
    CloseAllContractsMessage close_all_contracts_msg = 543;
    UpdateTraderSettingsMessage update_trader_settings_msg = 544;
    TraderSettingsMessage trader_settings_msg = 545;
    OrderCanceledMessage order_canceled_msg = 546;
    EngineStatusMessage engine_status_msg = 547;
    GetMarketStateMessage get_market_state_msg = 548;
    MarketStateMessage market_state_msg = 549;
    GetExchangeRatesMessage get_exchange_rates_msg = 550;
    ExchangeRatesMessage exchange_rates_msg = 551;
    MarketStateUpdateMessage market_state_update_msg = 552;
    ContractClosedMessage contract_closed_msg = 553;
    ContractTransferredMessage contract_transferred_msg = 554;
    StartRunMessage start_run_msg = 555;
    RunStartedMessage run_started_msg = 556;
    FinishRunMessage finish_run_msg = 557;
    RunFinishedMessage run_finished_msg = 558;
    UpdateContestTraderSettingsMessage update_contest_trader_settings_msg = 559;
    ContestTraderSettingsMessage contest_trader_settings_msg = 560;
    ControlResultMessage control_result_msg = 561;
    GetTraderBalanceMessage get_trader_balance_msg = 562;
    UpdateTraderBalanceMessage update_trader_balance_msg = 563;
    TraderBalanceUpdatedMessage trader_balance_updated_msg = 564;
    InternalMarketStateUpdateMessage internal_market_state_update_msg = 565;
    PlaceDelayedActionMessage place_delayed_action_msg = 566;
    UpdateDelayedActionMessage update_delayed_action_msg = 567;
    CancelDelayedActionMessage cancel_delayed_action_msg = 568;
    DelayedActionStatusMessage delayed_action_status_msg = 569;
    LiquidationsMessage liquidations_msg = 570;
    FundingInfoMessage funding_info_msg = 571;
    ErrorMessage error_msg = 572;  // Error message
    MarketTraderStatisticsMessage market_trader_statistics_msg = 573;
    ExchangeRatesUpdateMessage exchange_rates_update_msg = 574;
  }
}